// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetTestById mocks base method.
func (m *MockRepositoryInterface) GetTestById(ctx context.Context, input GetTestByIdInput) (QueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestById", ctx, input)
	ret0, _ := ret[0].(QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestById indicates an expected call of GetTestById.
func (mr *MockRepositoryInterfaceMockRecorder) GetTestById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTestById), ctx, input)
}

// GetUserData mocks base method.
func (m *MockRepositoryInterface) GetUserData(ctx context.Context, input UserInput) (QueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, input)
	ret0, _ := ret[0].(QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserData(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserData), ctx, input)
}

// Logged mocks base method.
func (m *MockRepositoryInterface) Logged(ctx context.Context, phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logged", ctx, phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logged indicates an expected call of Logged.
func (mr *MockRepositoryInterfaceMockRecorder) Logged(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logged", reflect.TypeOf((*MockRepositoryInterface)(nil).Logged), ctx, phoneNumber)
}

// SignUp mocks base method.
func (m *MockRepositoryInterface) SignUp(ctx context.Context, input UserInput) (QueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockRepositoryInterfaceMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockRepositoryInterface)(nil).SignUp), ctx, input)
}

// UpdateName mocks base method.
func (m *MockRepositoryInterface) UpdateName(ctx context.Context, newName, oldName, phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, newName, oldName, phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateName(ctx, newName, oldName, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateName), ctx, newName, oldName, phoneNumber)
}

// UpdatePhoneNumber mocks base method.
func (m *MockRepositoryInterface) UpdatePhoneNumber(ctx context.Context, newNumber, oldNumber, fullName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumber", ctx, newNumber, oldNumber, fullName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoneNumber indicates an expected call of UpdatePhoneNumber.
func (mr *MockRepositoryInterfaceMockRecorder) UpdatePhoneNumber(ctx, newNumber, oldNumber, fullName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumber", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdatePhoneNumber), ctx, newNumber, oldNumber, fullName)
}

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// Response defines model for Response.
type Response struct {
	Message string `json:"message"`
}

// HelloParams defines parameters for Hello.
type HelloParams struct {
	Id string `form:"id" json:"id"`
}

// PostLoginParams defines parameters for PostLogin.
type PostLoginParams struct {
	PhoneNumber string `form:"phone_number" json:"phone_number"`
	Password    string `form:"password" json:"password"`
}

// PostSignupParams defines parameters for PostSignup.
type PostSignupParams struct {
	PhoneNumber string `form:"phone_number" json:"phone_number"`
	FullName    string `form:"full_name" json:"full_name"`
	Password    string `form:"password" json:"password"`
}

// UpdateMyProfileParams defines parameters for UpdateMyProfile.
type UpdateMyProfileParams struct {
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty"`
	FullName    *string `form:"full_name,omitempty" json:"full_name,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This is just a test endpoint to get you started. Please delete this endpoint.
	// (GET /hello)
	Hello(ctx echo.Context, params HelloParams) error
	// Login
	// (POST /login)
	PostLogin(ctx echo.Context, params PostLoginParams) error
	// Get My Profile
	// (GET /my-profile)
	GetMyProfile(ctx echo.Context) error
	// Sign up
	// (POST /signup)
	PostSignup(ctx echo.Context, params PostSignupParams) error
	// Update My Profile
	// (PATCH /update-my-profile)
	UpdateMyProfile(ctx echo.Context, params UpdateMyProfileParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Hello converts echo context to params.
func (w *ServerInterfaceWrapper) Hello(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HelloParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Hello(ctx, params)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLoginParams
	// ------------- Required query parameter "phone_number" -------------

	err = runtime.BindQueryParameter("form", true, true, "phone_number", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone_number: %s", err))
	}

	// ------------- Required query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, true, "password", ctx.QueryParams(), &params.Password)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter password: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogin(ctx, params)
	return err
}

// GetMyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyProfile(ctx)
	return err
}

// PostSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PostSignup(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSignupParams
	// ------------- Required query parameter "phone_number" -------------

	err = runtime.BindQueryParameter("form", true, true, "phone_number", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone_number: %s", err))
	}

	// ------------- Required query parameter "full_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "full_name", ctx.QueryParams(), &params.FullName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter full_name: %s", err))
	}

	// ------------- Required query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, true, "password", ctx.QueryParams(), &params.Password)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter password: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSignup(ctx, params)
	return err
}

// UpdateMyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMyProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateMyProfileParams
	// ------------- Optional query parameter "phone_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "phone_number", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone_number: %s", err))
	}

	// ------------- Optional query parameter "full_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "full_name", ctx.QueryParams(), &params.FullName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter full_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMyProfile(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hello", wrapper.Hello)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.GET(baseURL+"/my-profile", wrapper.GetMyProfile)
	router.POST(baseURL+"/signup", wrapper.PostSignup)
	router.PATCH(baseURL+"/update-my-profile", wrapper.UpdateMyProfile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW/jNhD9KwO2R63sbtIC62O/NimaNsgHetgEC5ocWcxSJEMO46pB/ntBUkplb1xs",
	"0G2aIifL0nDmcfje49wyYTtnDRoKbHHLgmix4/nxB++tP8HgrAmYXjhvHXpSmD93GAJf5Q/UO2QLFsgr",
	"s2J3dxXzeB2VR8kW7+4DL6sx0C6vUBC7q9i/mj5FKtPYlEMrgUMdw7sUdXR4lhCQIp3+ngf0cIr+Rglk",
	"FbtBH5Q1bMG+quf1PEVah4Y7xRZsL7+qmOPUZrCzFrXOdVZI6SfthJOy5lCyBTvIX1O85x0S+sAW726Z",
	"SumvI/qeVSMqJdl0e+QjVsOhPNSKyxRcWpiBvJ7P04+whtBkJNw5rUTGMrsKaUe3k3xfemzYgn0x+4sF",
	"s4ECs/uzyY2UGIRXjkpTzjAQeKToTWrN/nz/s5XdpN0DtX+xBI2NRmYqhNh13PcJU6sCqABXMRBwoAQR",
	"jXRWGQKysEKC3kYIxD2hrOFYIw8IEjUSAqXlY3ydc8+0XakM3dmQt7XVhekS4EKgowCutQbBxG6JHriR",
	"4HgIa+slNAq1DDUcEogWxYcA1CJITnyZgKxbpBZ9filst1Qm9w/wdxUo1HDurIEQhcAQKlDjAZQsh9+D",
	"bfJTDENdDj/9dgZrRS1wvbJeUdvByenrr7/JELgOFpQRHrt0AHntgNo2Y50mashdCCU9p5JfmQ3sNZyb",
	"7RWwVloPGOHg7OwY9udz+JZLOMHriIECCCuxvjCs2hLMsQ30c+79J4kmd/x9wf4o+VQ78g0H9r+Q4ulW",
	"24se50+nx8mJPhsvKOTJGu76V87bRmmc+PPf6TjTtog5C4gH4LBE7pM07Qc0I/l5pNZ69Ufe2YVpkUv0",
	"mzJNp3KDXjXD/qtiM1NlZNnxDj+Sb/qTmX1hCrVr+DX5w1oF3JLVHvxo/VJJiWanpt4iHfXHQyeeFVf3",
	"no4v923a4stbJDjqYWxPJk5QKxPdZ3f/HXZ3Wqr9J37XRK3f5+cXbJ7puCG6F2WfA99hl42ejj1JeohO",
	"csJXm37qOIn2U7UxuOm2l274KIw2Ok4ou4Q1sx4ScYt53o9WxUR9aWgaB8fsKPPMVHZRpp2yqEw1ecga",
	"nX1YXoGqsQbVTAqVYSxFmY/SjUE1HNg13qCvICgjEBLyDfyCG7BG97BEbc0qjafpa/L+KtXj5RpY8zyY",
	"WRAtNytMT9wA1x657AsUZVabqSdz4XA7vIHvrGm0EvRQf6KZdijv6/GXy3luw/R+ebyN/SPben7WMmqr",
	"MEROJgLdv3STSQjePB2Ckf5b7lZIu3nvpwD0NyNto9dswVoit5jNtBVct2kWuLu8+zMAAP//jav/GTkR",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
